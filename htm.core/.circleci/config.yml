# CircleCI Build Config
#   https://circleci.com/docs/2.0/configuration-reference/#section=configuration
#
# Targets:
#   - Max OS/X
#   - ARM64

version: 2
jobs:

  # job: Mac OS/X raw ("build-debug"). This job builds and runs C++ tests in Debug mode 
  osx-build-debug:
    macos:
      xcode: '11.0.0'
    working_directory: ~/numenta/htm.core
    parallelism: 1
    environment:
      XCODE_SCHEME: htm
      XCODE_WORKSPACE: htm
      ARCHFLAGS: -arch x86_64
    steps:
      # Machine Setup
      - run:
          name: Make sure to use OS X in CircleCI Web UI
          command: |
            if [[ "$OSTYPE" != "darwin"* ]]; then
              echo "Must set option to use OS X in CircleCI Web UI" && exit 1;
            fi
      - run: sudo systemsetup -settimezone 'GMT'
      - run:
          name: Installing cmake
          command: brew install cmake || brew install cmake
      - checkout
      - run:
          name: Build in Debug mode
          environment:
            VERBOSE: 1
          #     Building only the C++ library and unit_test executables.
          command: |
            mkdir -p build/scripts
            cd build/scripts
            cmake -DCMAKE_BUILD_TYPE=Debug  ../..
            make -j2 | grep -v -F '\\-\\- Installing:'
            make install 2>&1 | grep -v -F 'Installing:'
      - run:
          name: Test in Debug mode
          environment:
            VERBOSE: 1
          command: |
            cd ./build/Debug/bin
            ./unit_tests 
  
  
  
  # job: Mac OS/X raw ("build-release"). This job builds in Release mode, used for C++ and Python tests. 
  osx-build-release:
    macos:
      xcode: '11.0.0'
    working_directory: ~/numenta/htm.core
    parallelism: 1
    environment:
      XCODE_SCHEME: htm
      XCODE_WORKSPACE: htm
      ARCHFLAGS: -arch x86_64
    steps:
      # Machine Setup
      - run:
          name: Make sure to use OS X in CircleCI Web UI
          command: |
            if [[ "$OSTYPE" != "darwin"* ]]; then
              echo "Must set option to use OS X in CircleCI Web UI" && exit 1;
            fi
      - run: sudo systemsetup -settimezone 'GMT'
      - run:
          name: Restoring system python
          command: |
            echo 'default to python3' && rm /usr/local/bin/python && ln -s /usr/local/bin/python3 /usr/local/bin/python
            echo 'python version: ' && python --version
            echo 'pip version: ' && python -m pip --version
      - run:
          name: Installing cmake
          command: brew install cmake || brew install cmake
      - checkout
      - run:
          name: Installing python dependencies
          command: |
            python -m pip install --user --upgrade pip setuptools setuptools-scm wheel

      # Build Release with python
      - run:
          name: Build in Release mode
          environment:
              VERBOSE: 1
          command: |
              python setup.py install --user  --prefix=
 
      # Test, run python unit test scripts
      - run:
          name: Running python tests
          command: python setup.py test
      - store_test_results:
          path: tests

      - run:
          name: Package Binary release for OSX
          command: |
            python setup.py bdist_wheel
            cd build/scripts
            make package
            # save artifacts so you can see them with circleCI web site
            mkdir -p /tmp/uploads
            cp -a *.tar.gz /tmp/uploads



  # job: Mac OS/X raw ("build-release"). This job builds in Release mode, to build artifacts for deplyment
  osx-build-tagged:
    macos:
      xcode: '11.0.0'
    working_directory: ~/numenta/htm.core
    parallelism: 1
    environment:
      XCODE_SCHEME: htm
      XCODE_WORKSPACE: htm
      ARCHFLAGS: -arch x86_64
    steps:
      # Machine Setup
      - run:
          name: Make sure to use OS X in CircleCI Web UI
          command: |
            if [[ "$OSTYPE" != "darwin"* ]]; then
              echo "Must set option to use OS X in CircleCI Web UI" && exit 1;
            fi
      - run: sudo systemsetup -settimezone 'GMT'
      - run:
          name: Restoring system python
          command: |
            echo 'default to python3' && rm /usr/local/bin/python && ln -s /usr/local/bin/python3 /usr/local/bin/python
            echo 'python version: ' && python --version
            echo 'pip version: ' && python -m pip --version
      - run:
          name: Installing cmake
          command: brew install cmake || brew install cmake
      - checkout
      - run:
          name: Installing python dependencies
          command: |
            python -m pip install --user --upgrade pip setuptools setuptools-scm wheel
            python -m pip install --no-cache-dir --user -r bindings/py/packaging/requirements.txt  --verbose || exit
      # Build Release with python
      - run:
          name: Build in Release mode
          environment:
              VERBOSE: 1
          command: |
              python setup.py install --user  --prefix=
      - run:
          name: Package Binary release for OSX
          command: |
            python setup.py bdist_wheel
            pushd build/scripts
            make package
            # save artifacts so you can see them with circleCI web site
            mkdir -p /tmp/uploads
            cp -a *.tar.gz /tmp/uploads
            popd
      # API for storing and downloading artifacts to/from CI:
      # see https://circleci.com/docs/2.0/artifacts/
      - store_artifacts:
          path: /tmp/uploads
          
      # Now deploy artifacts to GitHub and PYPI
      - run:
          name: deploy_artifacts
          command: |
            echo `pwd`
            ./ci/deploy.sh $CIRCLE_TAG



  # job: ARM64 via Docker + QEMU ("arm64-build-test")
  arm64-build-test:
    parallelism: 1
    docker:
      # CircleCI base Debian 10 Buster with remote Docker access, etc.
      #   https://circleci.com/docs/2.0/circleci-images/#buildpack-deps
      - image: circleci/buildpack-deps:buster
    steps:
      - run:
          # This is for local test builds using the CircleCI terminal app.
          #   Local Docker seems to use sudo, CircleCI Docker does not.
          command: |
            if [[ $CIRCLE_SHELL_ENV == *"localbuild"* ]]; then
              echo "This is a local build. Enabling sudo for docker"
              echo 'export CI_SUDO="sudo"' >> $BASH_ENV
            else
              echo 'export CI_SUDO=' >> $BASH_ENV
            fi
            source $BASH_ENV
      - run: sudo apt-get -y install qemu-system
      - checkout
      - setup_remote_docker  # access circleci's custom docker service
      # make circleci x86_64/amd64 hardware think it's arm64 via docker+qemu
      - run: $CI_SUDO docker run --rm --privileged multiarch/qemu-user-static:register --reset
      - run:
          name: Running docker build on ARM64
          command: $CI_SUDO docker build -t htm-arm64-docker --build-arg arch=arm64 .
          no_output_timeout: 2h

workflows:
  version: 2

  osx-build-test: #runs on each commit
    jobs:
      - osx-build-debug    # Mac OS/X raw ("build-debug")
      - osx-build-release: # Mac OS/X raw ("build-release")
          requires:
            - osx-build-debug # all C++ debug tests must pass before Release (and thus artifact) is created
            
      - osx-build-tagged:  # Mac OS/X raw ("build-release") for use with tagged master.
          filters:   
            branches:
              # do not trigger on any branch...
              ignore: /.*/
            tags:
              # ...unless that build is a tagged build.
              only: /^v.*/


#  nightly: # build and tests taking long time (currecntly ARM64 build ~5hrs), runs only once a day
#    triggers:
#      - schedule:
#          cron: "6 0 * * *" # 6am UTC every day
#          filters:
#            branches:
#              only:
#                - master
#    jobs:
#      - arm64-build-test  # ARM64 docker/qemu ("arm64-build-test")
